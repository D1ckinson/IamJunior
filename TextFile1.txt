Малахов Павел Сергеевич — 21.11.2024 22:24
И плавно переходя в цели задания 27 есть общий вопрос: паттерны MV, MVC, MVP, MVVM и т.д. нужны, я так понял, для обеспечения "безопасности" для работы в Unity. Код в задании 27 с Unity вроде не связан. Зачем же это код так чудовищно!!!! усложнять (⁠неизвестно), организовывая эти "слои", зачем для этого делать мильён строк кода, если вопросы безопасности решаются инструментами из разделов Напильника про Инкапсуляцию, Наследование и полиморфизм? 
Сергей Куделин — 22.11.2024 20:27
Привет!  Код не будет запускаться, суть задания не в этом. Задание состоит в том, чтобы разобраться что делает код и написать более "правильную" его версию 

Эти поттерны созданы не для "безопасности", а для разделения ответственностей. Итоговое решение будет меньше 300 (можно уложиться в 200) строк, а код станет значительно более понятным и читаемым. 
Помимо этого, шаблоны изобрели для того, чтобы все программисты говорили на одном языке. Понимали целый участок кода по одному только названию.

DataTable  - буквально участок таблицы (считай, двумерный массив)

Path - статический класс для работы со строками, который представляют пути к файлам
Assembly - статический класс, предоставляющий информацию о сборке, окружении, запущенного кода. Строка с этими классами просто получает строку Data Source="ПУТЬ_К_ПАПКЕ_С_EXE\db.sqlite" Если файла нет, получаем сообщение о том, что его нет.

try / catch - механизм обработки ошибок. Пишем какой то код в блоке try, он выбрасывает исключение, мы попадаем в блок catch. В тот, в котором указана нужная ошибка. ex в этом случае - класс с данными об ошибке

В основном, знания можно получать либо с сайта метанит, либо с официальной документации майкрософт. 

EventArgs и object sender - стандартный паттерн майкрософт для событий. EventArgs - базовый класс с информацией о событии, object sender - класс, отправивший событие. Используется в классе EventHandler

object - базовый для всех объектов в c# класс

this - указание на то, что обращаемся к члену этого класса, в случае, если есть переменные с таким же названием или базовые реализации полей / методов 
Малахов Павел Сергеевич — 22.11.2024 20:38
Спасибо! 😀
Малахов Павел Сергеевич — 25.11.2024 18:40
@Сергей Куделин Сергей здравствуйте. Пытаюсь вернуться и понять правильный алгоритм выполнения задания 27: 1. Читаем код (переводим все непонятные английские слова, чтоб въехать в контекст, гуглим), понимаем, что лучше реализовать архитектурный паттерн MVP. 2. С учётом ⁠неизвестно определяемся с классами model (ICitizenService -> CitizenService -> IDatabaseContext -> SQLightDatabaseContext -> SQLightDatabase, Passport, Citizen), presenter (CitizenServicePresenter), view (CitizenServiceView), сетапер (CitizenServiceSetup), и все остальные базовые классы, которые встречаются в коде (название классов для первого раза очень не очевидны конечно, видать приходит только с опытом). 3. Далее берём код задания и прописываем для каждой логики (в общем для каждой строки кода), что она делает и в каком классе (в каких классах) эта строка должна быть тем или иным способом реализована, ну например так: https://gist.github.com/PavellMalakhov/dc1631d58c6e431d9387dc2fd70a3671 (на этом этапе чую много накосячил уже). А далее переписываем код заново (проводим рефакторинг, то есть улучшаем, но лишней логики не добавляем, за исключение предусловий в конструкторы и публичные методы с параметрами), руководствуясь ⁠неизвестно и тем, кто в паттерне MVP про кого знает, кто контачит с пользователем, кто содержит основную логику и не знает о других. 🙂 Или всё-таки проще накатать абы как  решение "в духе раннего крокодилового наркомана" 🙂 и далее по замечаниям менторов, устраняя эти замечания, прийти к верному решению? 🙂
Gist
CleanCode_ExampleTask21-27.cs
GitHub Gist: instantly share code, notes, and snippets.
CleanCode_ExampleTask21-27.cs
Сергей Куделин — 25.11.2024 19:10
Привет! Подход с анализом кода мне кажется лучше потому что там ты сам пытаешься определить назначение каждой конкретной строки и кому принадлежит эта логика.
С этого можно начать. Если есть какие то вопросы по поводу отношения классов или ответственностей (как, например, то, что строки должны быть в презентере) можешь спрашивать тут.

Суть задачи все таки заключается в ознакомлении с подходом разделения view и логики приложения.
В реальном проекте работа с БД будет сильно отличаться, поэтому можешь в основном оставить ее как есть, в остальном тоже могут быть отличия в решении .

Из своего опыта могу добавить что, хоть и не такой код, но крайне непонятный и запутанный встречается часто. Особенно если попадешь в проект с легаси. Помимо этого, без знания каких то узконаправленных терминов (конкретно проекта или компании)  будет очень тяжело разбираться для чего же все таки тот или иной метод / класс существует 
Сергей Куделин — 25.11.2024 19:11
И там либо только с более старшим наставником, либо через боль придется выяснять самому что и как работает. Хорошо, когда есть документация или Википедия.
Документация Майкрософт - твой друг
Малахов Павел Сергеевич — 25.11.2024 19:47
Спасибо! 🙂